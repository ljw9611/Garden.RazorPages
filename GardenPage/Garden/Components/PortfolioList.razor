@using Garden.Models
@using Garden.Services
@using Microsoft.AspNetCore.Components.Web
@inject PortfolioServiceJsonFile PortfolioService

<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css" />

<h2>Blazor 컴포넌트 사용 출력</h2>
<!-- row -->
<div class="row gx-5">
    @foreach (var portfolio in PortfolioService.GetPortfolios())
    {
        <div class="col-lg-4 mb-5">
            <div class="card h-100 shadow border-0">
                <img class="card-img-top" src="@portfolio.Image" alt="..." />
                <div class="card-body p-4">
                    <div class="badge bg-primary bg-gradient rounded-pill mb-2">News</div>
                    <h5 class="card-title mb-3">@portfolio.Title</h5>
                    <p class="card-text mb-0">@portfolio.Description</p>
                </div>
                <div class="card-footer p-4 pt-0 bg-transparent border-top-0">
                    <div class="d-flex align-items-end justify-content-between">
                        <div class="d-flex align-items-center">
                            <img class="rounded-circle me-3" src="https://dummyimage.com/40x40/ced4da/6c757d" alt="..." />
                            <div class="small">
                                <div class="fw-bold">Kelly Rowan</div>
                                <div class="text-muted">March 12, 2022 &middot; 6 min read</div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" 
                data-bs-toggle="modal" 
                data-bs-target="#exampleModal"
                @onclick="() => SelectPortfolio(portfolio.Id)"
                >
                    Preview
                </button>
            </div>
        </div>
    }
</div>
<!-- ./row-->

@if (selectedPortfolio != null)
{
    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@selectedPortfolio.Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h5>@selectedPortfolio.Description</h5>
                    <br>
                    @if(voteCount == 0)
                    {
                        <span>투표하세요 !</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <i @onclick="() => HandleClick(currentStar)" class="fas fa-star"></i>

                        }
                        else
                        {
                            <i @onclick="() => HandleClick(currentStar)" class="far fa-star"></i>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    Portfolio selectedPortfolio = new Portfolio();
    int currentRating = 3;
    int voteCount = 0;
    string voteLabel;
    void SelectPortfolio(int portfolioId)
    {
        selectedPortfolio = PortfolioService.GetPortfolios().First(p => p.Id == portfolioId);

        if (selectedPortfolio.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedPortfolio.Ratings.Count();
            voteLabel = (voteCount > 1) ? "Votes" : "Vote";
            currentRating = selectedPortfolio.Ratings.Sum() / voteCount;
        }
    }

    void HandleClick(int rating)
    {
        PortfolioService.AddRating(selectedPortfolio.Id, rating);
        SelectPortfolio(selectedPortfolio.Id);
    }
}
